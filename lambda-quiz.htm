<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Lambda Questions Quiz</title>
  <style>
    body { font-family: Arial, sans-serif; max-width: 700px; margin: 2rem auto; padding: 1rem; }
    .question-container { border: 1px solid #ddd; border-radius: 8px; padding: 1rem; margin-bottom: 1rem; }
    .options { margin-top: 0.5rem; list-style-type: none; padding: 0; }
    .options li {
      padding: 0.5rem;
      border: 1px solid #ddd;
      border-radius: 4px;
      margin-bottom: 0.5rem;
      cursor: pointer;
      transition: background-color 0.3s, color 0.3s;
    }
    .options li.correct {
      background-color: #d4edda;
      border-color: #28a745;
      color: #155724;
      font-weight: bold;
    }
    .options li.incorrect {
      background-color: #f8d7da;
      border-color: #dc3545;
      color: #721c24;
      font-weight: bold;
    }
    .options li.disabled {
      cursor: default;
      opacity: 0.7;
    }
    button {
      margin-top: 1rem;
      padding: 0.5rem 1rem;
      font-size: 1rem;
      cursor: pointer;
      border: none;
      border-radius: 4px;
      background-color: #007bff;
      color: white;
    }
    button:disabled {
      background-color: #6c757d;
      cursor: not-allowed;
    }
    .explanation {
      background: #f9f9f9;
      border: 1px solid #ccc;
      padding: 1rem;
      margin-top: 1rem;
      border-radius: 6px;
      font-style: italic;
    }
    .nav-buttons {
      margin-top: 2rem;
      text-align: center;
    }
    .nav-buttons button {
      margin: 0 10px;
      min-width: 120px;
    }
    .scoreboard {
      text-align: center;
      font-size: 1.4rem;
      font-weight: bold;
      margin-top: 3rem;
      padding: 2rem;
      border: 2px solid #007bff;
      border-radius: 12px;
      background-color: #e9f5ff;
      max-width: 400px;
      margin-left: auto;
      margin-right: auto;
      box-shadow: 0 0 15px rgba(0,123,255,0.3);
    }
    .icon {
      font-weight: bold;
      margin-left: 10px;
      font-size: 1.2em;
      vertical-align: middle;
    }
    .icon.correct {
      color: #28a745;
    }
    .icon.incorrect {
      color: #dc3545;
    }
  </style>
</head>
<body>

  <div id="question-page" class="question-container">
    <!-- Question content goes here -->
  </div>

  <div class="nav-buttons">
    <button id="prev-btn" disabled>Previous Question</button>
    <button id="next-btn" disabled>Next Question</button>
  </div>

  <div id="scoreboard" class="scoreboard" style="display:none;">
    <!-- Final score display -->
  </div>

  <!-- jQuery CDN -->
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

  <script>
    $(function() {
      // Full question data array - add all your questions here
      const questions = [
        {
      "Q_No": 1,
      "Question": "You have created a Lambda function that typically will take around 1 hour to process some data. The code works fine when you run it locally on your machine, but when you invoke the Lambda function it fails with a \"timeout\" error after 3 seconds. What should you do?",
      "A": "Configure your Lambda's timeout to 25 minutes",
      "B": "Configure your Lambda's memory to 10 GB",
      "C": "Run your code somewhere else (e.g., EC2 instance)",
      "D": "",
      "E": "",
      "Answer": "C",
      "Explanation": "Lambda's maximum execution time is 15 minutes. Since your process takes 1 hour, you should use an EC2 instance or another service suitable for long-running tasks."
    },
    {
      "Q_No": 2,
      "Question": "Which of the following is the best way to inject a dynamic DB_URL variable into your Lambda function's code?",
      "A": "Use Lambda’s Environment Variables",
      "B": "Place it in the code and create a zip file",
      "C": "Place it in the code itself",
      "D": "",
      "E": "",
      "Answer": "A",
      "Explanation": "Lambda’s Environment Variables allow you to adjust your function’s behavior without updating code."
    },
    {
      "Q_No": 3,
      "Question": "A Lambda function that's invoked asynchronously, fails to process from time to time after 3 retries. To troubleshoot the issue, you would like to collect and analyze these events later on. What is the best practice you can do?",
      "A": "Add logging statements for all events in your Lambda function, then filter CloudWatch Logs",
      "B": "Invoke your function synchronously",
      "C": "Add a Dead Letter Queue (DLQ) to send messages to SQS",
      "D": "Add a Dead Letter Queue (DLQ) to send messages to SNS",
      "E": "",
      "Answer": "C",
      "Explanation": "This is good as SQS will hold the failed messages for some days so we have time to consume and analyze them."
    },
    {
      "Q_No": 4,
      "Question": "You have enabled a Dead Letter Queue (DLQ) for your Lambda function and configured it to send failed messages to SNS. While testing, you don't see any events there even though you can tell from CloudWatch metrics that you have failures. What is most likely the reason for this?",
      "A": "AWS SNS is having outages",
      "B": "Your Lambda function's execution role is missing permissions",
      "C": "You should use SQS instead, there's no Lambda DLQ for SNS",
      "D": "",
      "E": "",
      "Answer": "B",
      "Explanation": "The Lambda function’s execution role must have permissions to send messages to the DLQ destination (SNS in this case). If permissions are missing, failures won’t be sent to SNS even if CloudWatch shows function errors."
    },
    {
      "Q_No": 5,
      "Question": "You have enabled X-Ray integration on your Lambda function but it doesn't work. What is a possible cause for this?",
      "A": "Check IAM permissions in your Lambda function's execution role",
      "B": "You need to run the X-Ray daemon as a dependency in your deployment package",
      "C": "You need to open a ticket with AWS Support",
      "D": "",
      "E": "",
      "Answer": "A",
      "Explanation": "The Lambda function's execution role must have the necessary permissions for X-Ray tracing. If the correct IAM permissions are missing, X-Ray integration will not work as expected."
    },
    {
      "Q_No": 6,
      "Question": "While updating a Lambda function, you get the following exception: “An error occurred: InvalidParameterValueException when calling the UpdateFunctionCode operation: Unzipped size must be smaller than 262144000 bytes”. What might be the possible cause of this error?",
      "A": "You have uploaded a deployment package .zip larger than 50 MB to AWS Lambda",
      "B": "The uncompressed deployment package .zip exceeds AWS Lambda Limits",
      "C": "The deployment package .zip file is corrupted",
      "D": "",
      "E": "",
      "Answer": "B",
      "Explanation": "The uncompressed deployment package (.zip) exceeds the AWS Lambda limits. The unzipped size must be smaller than 262,144,000 bytes (250MB), which is an AWS Lambda restriction."
    },
    {
      "Q_No": 7,
      "Question": "A Lambda function makes requests to 3rd party API. To successfully make the requests, the 3rd party API requires you to send a token which is a long string of 8 KB. Where should you place this token?",
      "A": "Place it in the Lambda function's environment variables",
      "B": "Place it in the deployment package .zip file",
      "C": "",
      "D": "",
      "E": "",
      "Answer": "B",
      "Explanation": "AWS Lambda environment variables have a size limit (4KB per variable, 8KB total). Since the token is 8KB, it exceeds the limit. Placing the token within the deployment package .zip file allows your function to access it without exceeding these environment variable restrictions."
    },
    {
      "Q_No": 8,
      "Question": "Every time you release a Lambda function version, it gets a new number and you have to manually update all the AWS resources linked to your function (e.g., event triggers). What should you do?",
      "A": "Use Lambda Aliases, and update the Alias to point to the new version",
      "B": "Use AWS CloudFormation to update all the links automatically",
      "C": "Just always use $LATEST and never worry again",
      "D": "",
      "E": "",
      "Answer": "A",
      "Explanation": "Lambda Aliases let you abstract version numbers, so you only update the alias to point to the new version; resources can stay linked to the alias."
    },
    {
      "Q_No": 9,
      "Question": "You have updated a Lambda function and created a new version. Now, you want to test out the new version and ensure it can sustain production traffic. You are risk-averse and don't want to take down your whole application. What should you do?",
      "A": "Create a new Lambda function and test there",
      "B": "Use Lambda Aliases, and point to the new and old versions, then assign weights",
      "C": "",
      "D": "",
      "E": "",
      "Answer": "B",
      "Explanation": "Lambda Aliases allow you to route a certain percentage of traffic to the new version and the rest to the old version (weighted aliases), enabling safe, incremental rollout and risk mitigation."
    },
    {
      "Q_No": 10,
      "Question": "You have a Lambda function used to retrieve data from an RDS DB instance. Each time the Lambda function is invoked, it establishes a new connection to your database. These connections make a load on your database and degrade its performance. So, you tell your developers to use long-lived database connections. They tell you that...",
      "A": "It's impossible, AWS Lambda containers are created and destroyed every time they are called",
      "B": "They will move the database connection object outside of the function handler",
      "C": "They will use an ElastiCache cluster to proxy requests to the RDS DB instance",
      "D": "",
      "E": "",
      "Answer": "B",
      "Explanation": "By moving the database connection object outside of the function handler, the Lambda container can reuse the connection if the container is reused (warm start), reducing the number of new connections created and improving performance."
    },
    {
      "Q_No": 11,
      "Question": "Your Lambda function written in Node.js wants to connect to an RDS PostgreSQL database in your VPC. The Lambda function must use the Node.js driver for PostgreSQL to connect to the database. How do you bundle your Lambda function to add the dependencies?",
      "A": "Put the function and the dependencies in one folder and zip them together",
      "B": "Zip the function as-is with a package.json file so that AWS Lambda can resolve the dependencies for you",
      "C": "Zip the function and the dependencies separately and upload them in AWS Lambda as two parts",
      "D": "Upload the code through the AWS Console and upload the dependencies as a .zip",
      "E": "",
      "Answer": "A",
      "Explanation": "You should put the function and all its dependencies (including the Node.js PostgreSQL driver) together in one folder, and then zip this folder before uploading to AWS Lambda. AWS Lambda requires all dependencies to be included in the deployment package unless specifically handled by Lambda Layers or other advanced methods."
    },
    {
      "Q_No": 12,
      "Question": "How do you declare a Lambda function in a CloudFormation template?",
      "A": "Upload all the code to AWS CodeCommit and refer to the CodeCommit repository in AWS::Lambda::Function block",
      "B": "Upload all the code to AWS CodeDeploy and refer to the CodeDeploy application in AWS::Lambda::Function block",
      "C": "Upload all the code as a folder to an S3 bucket and refer to the folder in AWS::Lambda::Function block",
      "D": "Upload all the code as a .zip file to an S3 bucket and refer to the object in AWS::Lambda::Function block",
      "E": "",
      "Answer": "D",
      "Explanation": "The preferred and correct method is to upload all Lambda code as a .zip file to an S3 bucket. Then, you reference the S3 object from within the AWS::Lambda::Function block in your CloudFormation template. This allows CloudFormation to deploy the Lambda using the packaged code."
    },
    {
      "Q_No": 13,
      "Question": "Which of the following allows you to deploy your Lambda function globally so that requests made to a CloudFront distribution are filtered at the AWS Edge Locations?",
      "A": "Lambda@Edge",
      "B": "Deploy Lambda in a global VPC",
      "C": "Deploy Lambda in S3 Bucket with S3 Cross-Region Replication enabled",
      "D": "",
      "E": "",
      "Answer": "A",
      "Explanation": "Lambda@Edge enables you to run Lambda functions at AWS Edge Locations globally, allowing you to intercept and process CloudFront requests close to end users for lower latency and flexible content handling."
    },
    {
      "Q_No": 14,
      "Question": "What is the recommended way to store temporary files used by your Lambda function that will be discarded when the function stops execution?",
      "A": "Use the local directory \"/opt\"",
      "B": "Create a tmp directory in the source zip file and use it",
      "C": "Use the local directory /tmp",
      "D": "Use an S3 bucket",
      "E": "",
      "Answer": "C",
      "Explanation": "The recommended way to store temporary files in AWS Lambda is to use the local directory /tmp. This directory is specifically designated for temporary storage, is cleared between invocations, and is limited in size (512MB by default). Files stored here are erased when the function execution ends."
    },
    {
      "Q_No": 15,
      "Question": "The maximum size for a Lambda function /tmp space is .........................",
      "A": "64 MB",
      "B": "128 MB",
      "C": "1024 MB",
      "D": "10240 MB",
      "E": "",
      "Answer": "D",
      "Explanation": "The /tmp directory in AWS Lambda provides temporary disk space accessible during function execution. The maximum size for this space is 10,240MB (or 10GB), allowing for storage of files needed during runtime, but this space is cleared between invocations."
    },
    {
      "Q_No": 16,
      "Question": "Which of the following AWS services allows you to schedule your Lambda function to be invoked every hour?",
      "A": "Amazon S3",
      "B": "Simple Queue Service (SQS)",
      "C": "Amazon EventBridge",
      "D": "Kinesis Data Streams",
      "E": "",
      "Answer": "C",
      "Explanation": "Amazon EventBridge (formerly CloudWatch Events) allows you to create rules to invoke your Lambda function on a schedule (e.g., every hour)."
    },
    {
      "Q_No": 17,
      "Question": "To use your Lambda function with an Application Load Balancer, the Lambda function must be registered with ..............................",
      "A": "An Event Source Mapping",
      "B": "A Target Group",
      "C": "An Asynchronous Invocation",
      "D": "An Auto Scaling Group",
      "E": "",
      "Answer": "B",
      "Explanation": "To use a Lambda function with an Application Load Balancer (ALB), the Lambda must be registered as a target in a Target Group. The ALB then routes requests to the Lambda function using this target group."
    },
    {
      "Q_No": 18,
      "Question": "You have enabled and configured Event Notifications in your S3 bucket to invoke a Lambda function every time an object is uploaded to your S3 bucket. You have noticed that there's duplicate logging into CloudWatch Logs with the same request ID. What do you think is the reason for this?",
      "A": "The Lambda function has failed and retries have happened",
      "B": "The S3 bucket invoked your Lambda function too many times",
      "C": "The Lambda function timeout is too low",
      "D": "",
      "E": "",
      "Answer": "A",
      "Explanation": "When a Lambda function fails to execute successfully, AWS automatically retries the invocation. This can cause multiple log entries with the same request ID in CloudWatch Logs, as the same event is retried and logged again."
    },
    {
      "Q_No": 19,
      "Question": "Which of the following AWS service does NOT require a Lambda Event Source Mapping?",
      "A": "DynamoDB Streams",
      "B": "Kinesis Data Streams",
      "C": "Simple Queue Service (SQS)",
      "D": "Simple Notification Service (SNS)",
      "E": "",
      "Answer": "D",
      "Explanation": "SNS is asynchronous and directly invokes Lambda functions without the need for Event Source Mapping."
    },
    {
      "Q_No": 20,
      "Question": "Which of the following is the recommended way to send the result of an asynchronous Lambda function to an SQS queue?",
      "A": "Write it in the Lambda function code",
      "B": "Use Lambda Destinations",
      "C": "Use Lambda Layers",
      "D": "Use a Dead Letter Queue (DLQ)",
      "E": "",
      "Answer": "B",
      "Explanation": "The recommended way is to use Lambda Destinations, which allows you to route the result of an asynchronous Lambda invocation to an SQS queue, SNS topic, another Lambda function, or EventBridge, based on success or failure."
    },
    {
      "Q_No": 21,
      "Question": "AWS Lambda natively supports the following programming languages, EXCEPT ....................",
      "A": "Go",
      "B": "Python",
      "C": "C++",
      "D": "Node.js",
      "E": "Java",
      "Answer": "C",
      "Explanation": "AWS Lambda natively supports Go, Python, Node.js, and Java, but it does not natively support C++. C++ is not available as a native Lambda runtime, and running C++ code would require using a custom runtime or wrapping C++ binaries."
    },
    {
      "Q_No": 22,
      "Question": "You have a Lambda function written in Python which has a lot of dependencies. Each time you update and deploy your function, it takes 15 minutes to natively compile these dependencies and therefore deployments have been really slow. What do you suggest?",
      "A": "Store the dependencies in an S3 bucket",
      "B": "Build the dependencies on an EC2 instance",
      "C": "Migrate to Node.js",
      "D": "Create a Lambda Layer and include all the dependencies in it",
      "E": "",
      "Answer": "D",
      "Explanation": "By creating a Lambda Layer and including all the dependencies in it, you can avoid recompiling and redeploying dependencies every time you update your Lambda function, greatly speeding up deployments."
    },
    {
      "Q_No": 23,
      "Question": "You want to give another AWS account access to invoke a Lambda function in your AWS account. Which of the following can NOT be used to do so?",
      "A": "Lambda Execution Role",
      "B": "Lambda Resource-based Policy",
      "C": "Cross-account IAM Role",
      "D": "",
      "E": "",
      "Answer": "A",
      "Explanation": "A Lambda Execution Role defines permissions for the Lambda function to access AWS services/resources, not for others to invoke the function. To allow another AWS account to invoke your Lambda, you would use a resource-based policy or a cross-account IAM role."
    },
    {
      "Q_No": 24,
      "Question": "You have a CloudFormation template that declares a Lambda function. The Lambda function's code is stored in an S3 bucket with Versioning enabled. You use \"S3Bucket\", \"S3Key\", and \"S3ObjectVersion\" in the CloudFormation template to reference the code. You have updated the Lambda function's code then uploaded it to S3, but the function hasn't been updated. What should you do?",
      "A": "Update \"S3Bucket\" to reference the updated code",
      "B": "Update \"S3Key\" to reference the updated code",
      "C": "Update \"S3ObjectVersion\" to reference the updated code",
      "D": "",
      "E": "",
      "Answer": "C",
      "Explanation": "When using versioned objects in S3, CloudFormation references the Lambda code by \"S3ObjectVersion\". If you update the code in S3 but do not update the \"S3ObjectVersion\" in your template, CloudFormation will not detect a change. To update the function, specify the new \"S3ObjectVersion\" that matches your latest upload."
    },
    {
      "Q_No": 25,
      "Question": "Which of the following Lambda features can NOT be used to create a custom runtime if it isn't natively supported by AWS Lambda?",
      "A": "Lambda Layers",
      "B": "Lambda Destinations",
      "C": "Lambda Container Images",
      "D": "",
      "E": "",
      "Answer": "B",
      "Explanation": "\"Lambda Destinations\" are used to handle function execution results (e.g., send outputs to SQS, SNS, etc.) but cannot be used to build or customize a Lambda runtime. Only Lambda Layers and Lambda Container Images help build or extend support for custom runtimes."
    },
    {
      "Q_No": 26,
      "Question": "You are using CodeDeploy for automated deployments to your Lambda function. You updated your Lambda function's code and want to deploy the new version, test it with a small amount of traffic, then totally shift to the new version. Which CodeDeploy deployment type do you recommend?",
      "A": "Linear",
      "B": "AllAtOnce",
      "C": "Canary",
      "D": "",
      "E": "",
      "Answer": "C",
      "Explanation": "The \"Canary\" deployment type allows you to deploy the new version to a small portion of traffic first, verify its functionality, and then shift all traffic to the new version. This approach helps minimize risk and allows for easy rollback if issues are detected."
    }
      ];

      let currentIndex = 0;
      let wrongCount = 0;
      let answeredQuestions = new Array(questions.length).fill(false);

      const $questionPage = $('#question-page');
      const $prevBtn = $('#prev-btn');
      const $nextBtn = $('#next-btn');
      const $scoreboard = $('#scoreboard');

      function escapeHtml(text) {
        return $('<div>').text(text).html();
      }

      function renderQuestion(index) {
        let q = questions[index];
        if (!q) {
          $questionPage.html('<p>No question found.</p>');
          return;
        }

        // Hide scoreboard if showing
        $scoreboard.hide().html('');
        $questionPage.show();

        const optionsKeys = ['A', 'B', 'C', 'D', 'E'];
        let optionsHtml = '<ul class="options">';
        optionsKeys.forEach(key => {
          if (q[key] && q[key].trim() !== '') {
            optionsHtml += `<li data-option="${key}"><strong>${key}.</strong> ${escapeHtml(q[key])} <span class="icon"></span></li>`;
          }
        });
        optionsHtml += '</ul>';

        $questionPage.html(`
          <h2>Question ${q.Q_No}</h2>
          <p>${escapeHtml(q.Question)}</p>
          ${optionsHtml}
          <div id="explanation" class="explanation" style="display:none;"></div>
        `);

        const $options = $questionPage.find('.options li');
        $options.removeClass('correct incorrect disabled')
                .css('pointer-events', 'auto')
                .find('.icon').text('').removeClass('correct incorrect');

        // Next button disabled until answer selected
        $nextBtn.prop('disabled', true);

        // Previous button hidden on first question
        if (index === 0) {
          $prevBtn.hide();
        } else {
          $prevBtn.show().prop('disabled', false);
        }

        // Next button text changes on last question
        if (index === questions.length - 1) {
          $nextBtn.text('Show Results');
        } else {
          $nextBtn.text('Next Question');
        }

        if (answeredQuestions[index]) {
          // Disable options and show answer + explanation, enable next
          showAnswerHighlight(q);
          $nextBtn.prop('disabled', false);
        } else {
          // Attach click handler for options
          $options.off('click').on('click', function() {
            handleAnswerSelection($(this), q);
          });
        }
      }

      function handleAnswerSelection($selectedLi, question) {
        let selectedOption = $selectedLi.data('option');

        if (answeredQuestions[currentIndex]) return;

        const $options = $questionPage.find('.options li');

        // Disable all options after selection
        $options.addClass('disabled').css('pointer-events', 'none');

        answeredQuestions[currentIndex] = true;

        const $explanation = $('#explanation');
        $explanation.show();

        if (selectedOption === question.Answer) {
          $selectedLi.addClass('correct');
          $selectedLi.find('.icon').text('✓').addClass('correct');
          $explanation.html('<strong>Correct!</strong> ' + escapeHtml(question.Explanation));
        } else {
          $selectedLi.addClass('incorrect');
          $selectedLi.find('.icon').text('✗').addClass('incorrect');

          // Highlight correct answer
          $options.each(function() {
            if ($(this).data('option') === question.Answer) {
              $(this).addClass('correct');
              $(this).find('.icon').text('✓').addClass('correct');
            }
          });

          $explanation.html('<strong>Incorrect.</strong> ' + escapeHtml(question.Explanation));
          wrongCount++;
        }

        // Enable Next button after answer selection
        $nextBtn.prop('disabled', false);
      }

      function showAnswerHighlight(question) {
        const $options = $questionPage.find('.options li');
        const $explanation = $('#explanation');
        $explanation.show();
        $explanation.html('<strong>Explanation:</strong> ' + escapeHtml(question.Explanation));

        $options.addClass('disabled').css('pointer-events', 'none');

        $options.each(function() {
          if ($(this).data('option') === question.Answer) {
            $(this).addClass('correct');
            $(this).find('.icon').text('✓').addClass('correct');
          }
        });
      }

      $prevBtn.click(function() {
        if (currentIndex > 0) {
          currentIndex--;
          renderQuestion(currentIndex);
        }
      });

      $nextBtn.click(function() {
        if (currentIndex < questions.length - 1) {
          currentIndex++;
          renderQuestion(currentIndex);
        } else {
          showFinalScore();
        }
      });

      function showFinalScore() {
        $questionPage.hide();
        $prevBtn.hide();
        $nextBtn.hide();

        const totalQuestions = questions.length;
        const correctCount = totalQuestions - wrongCount;

        $scoreboard.html(`
          <p>Your Score: <strong>${correctCount} / ${totalQuestions}</strong></p>
          <p>Wrong Answers: <strong>${wrongCount}</strong></p>
          <button id="restart-btn">Restart Quiz</button>
        `).show();

        $('#restart-btn').click(function() {
          currentIndex = 0;
          wrongCount = 0;
          answeredQuestions.fill(false);
          $prevBtn.show().prop('disabled', true);
          $nextBtn.show().prop('disabled', true);
          $scoreboard.hide();
          renderQuestion(currentIndex);
        });
      }

      // Initial render
      renderQuestion(currentIndex);
    });
  </script>

</body>
</html>
